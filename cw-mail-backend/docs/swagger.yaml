basePath: /api/v1
definitions:
  controllers.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  controllers.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  controllers.SendMessageRequest:
    properties:
      body:
        example: Текст сообщения содержит важную информацию
        type: string
      receiver_email:
        example: receiver@example.com
        type: string
      subject:
        example: Важное сообщение
        type: string
    required:
    - body
    - receiver_email
    - subject
    type: object
  controllers.TokenResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  controllers.UserResponse:
    properties:
      user_id:
        example: 1
        type: integer
    type: object
  models.Message:
    properties:
      body:
        type: string
      created_at:
        type: string
      id:
        type: integer
      receiver:
        $ref: '#/definitions/models.User'
      receiver_id:
        type: integer
      sender:
        $ref: '#/definitions/models.User'
      sender_id:
        type: integer
      subject:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      role:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@mail-service.com
    name: Mail Service API Support
    url: https://github.com/mail-service
  description: API сервиса обмена сообщениями
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Mail Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя и возвращает JWT токен
      parameters:
      - description: Данные для входа
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT токен
          schema:
            $ref: '#/definitions/controllers.TokenResponse'
        "400":
          description: Неверные данные запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неверные учетные данные
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Вход в систему
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя и возвращает JWT токен
      parameters:
      - description: Данные для регистрации
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: JWT токен
          schema:
            $ref: '#/definitions/controllers.TokenResponse'
        "400":
          description: Неверные данные запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Пользователь с таким email уже существует
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Регистрация нового пользователя
      tags:
      - auth
  /messages/inbox:
    get:
      description: Возвращает список входящих сообщений текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Список входящих сообщений
          schema:
            items:
              $ref: '#/definitions/models.Message'
            type: array
        "401":
          description: Пользователь не аутентифицирован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить входящие сообщения
      tags:
      - messages
  /messages/send:
    post:
      consumes:
      - application/json
      description: Отправляет сообщение другому пользователю
      parameters:
      - description: Данные для отправки сообщения
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.SendMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Созданное сообщение
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Неверные данные запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Пользователь не аутентифицирован
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Получатель не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Отправить сообщение
      tags:
      - messages
  /messages/sent:
    get:
      description: Возвращает список отправленных сообщений текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Список отправленных сообщений
          schema:
            items:
              $ref: '#/definitions/models.Message'
            type: array
        "401":
          description: Пользователь не аутентифицирован
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить отправленные сообщения
      tags:
      - messages
  /users/me:
    get:
      description: Возвращает идентификатор текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Информация о пользователе
          schema:
            $ref: '#/definitions/controllers.UserResponse'
        "401":
          description: Пользователь не аутентифицирован
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить информацию о текущем пользователе
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Введите токен с префиксом 'Bearer '
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
